﻿@{
    ViewData["Title"] = "Admin Paneli - Dr.PlantAI";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary-color: #4CAF50;
        --secondary-color: #2E7D32;
        --dark-color: #2c3e50;
        --light-color: #f8f9fa;
        --danger-color: #e74c3c;
        --warning-color: #f39c12;
        --info-color: #3498db;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .admin-container {
        background-color: inherit;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 25px;
        margin: 20px;
    }

    .admin-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background-color: inherit;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        border-top: 4px solid var(--primary-color);
    }

        .stat-card i {
            font-size: 40px;
            color: var(--primary-color);
            margin-bottom: 15px;
        }

        .stat-card h3 {
            font-size: 16px;
            color: #666;
            margin-bottom: 10px;
        }

        .stat-card .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--dark-color);
        }

    .admin-section {
        margin-bottom: 30px;
        padding-bottom: 30px;
        border-bottom: 1px solid #eee;
    }

        .admin-section:last-child {
            border-bottom: none;
        }

        .admin-section h2 {
            color: var(--dark-color);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group input[type="email"],
        .form-group input[type="password"],
        .form-group input[type="file"],
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        .form-group textarea {
            min-height: 100px;
            resize: vertical;
        }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 30px;
    }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-switch label {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: inherit;
            transition: .4s;
            border-radius: 34px;
        }

            .toggle-switch label:before {
                position: absolute;
                content: "";
                height: 22px;
                width: 22px;
                left: 4px;
                bottom: 4px;
                background-color: inherit;
                transition: .4s;
                border-radius: 50%;
            }

        .toggle-switch input:checked + label {
            background-color: var(--primary-color);
        }

            .toggle-switch input:checked + label:before {
                transform: translateX(30px);
            }

    .button-group {
        margin-top: 20px;
    }

    .save-button {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s;
    }

        .save-button:hover {
            background-color: var(--secondary-color);
        }

    .btn {
        padding: 6px 12px;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
        border: none;
        transition: all 0.3s;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: white;
    }

    .btn-danger {
        background-color: var(--danger-color);
        color: white;
    }

    .btn-warning {
        background-color: var(--warning-color);
        color: white;
    }

    .table-container {
        overflow-x: auto;
        max-width: 100%;
        margin-bottom: 20px;
    }

    .admin-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .admin-table th,
        .admin-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .admin-table th {
            background-color: var(--primary-color);
            color: inherit;
            font-weight: 600;
        }

        .admin-table tr:nth-child(even) {
            background-color: inherit;
        }

        .admin-table tr:hover {
            background-color: inherit;
        }

    .model-selection {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    .model-card {
        flex: 1;
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        cursor: pointer;
        transition: all 0.3s;
    }

        .model-card.selected {
            border-color: var(--primary-color);
            background-color: rgba(76, 175, 80, 0.1);
        }

        .model-card h3 {
            margin-bottom: 10px;
            color: var(--dark-color);
        }

        .model-card p {
            color: #666;
            margin-bottom: 15px;
        }

    /* Modal Stilleri */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: inherit;
        margin: 5% auto;
        padding: 25px;
        border-radius: 8px;
        width: 80%;
        max-width: 600px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    .modal-title {
        font-size: 20px;
        color: var(--dark-color);
    }

    .close-button {
        font-size: 24px;
        font-weight: bold;
        color: #aaa;
        cursor: pointer;
    }

        .close-button:hover {
            color: #333;
        }

    .modal-footer {
        margin-top: 20px;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    /* Arka plan resim galerisi */
    .background-thumbnail {
        cursor: pointer;
        border: 2px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
        position: relative;
        transition: all 0.3s;
    }

        .background-thumbnail:hover {
            border-color: var(--primary-color);
        }

        .background-thumbnail.selected {
            border-color: var(--primary-color);
        }

    .background-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.3);
        display: none;
    }

    .background-thumbnail.selected .background-overlay {
        display: block;
    }

    /* Responsive stiller */
    @@media (max-width: 768px) {
        .admin-stats {
            grid-template-columns: 1fr;
        }

        .model-selection {
            flex-direction: column;
        }
    }
</style>

<div class="admin-container">
    <div class="admin-stats">
        <div class="stat-card">
            <i class="fas fa-users"></i>
            <h3>Toplam Kullanıcı</h3>
            <div class="stat-value" id="totalUsers">@ViewBag.TotalUsers</div>
        </div>
        <div class="stat-card">
            <i class="fas fa-chart-line"></i>
            <h3>Toplam Analiz</h3>
            <div class="stat-value" id="totalAnalysis">@ViewBag.TotalAnalysis</div>
        </div>
        <div class="stat-card">
            <i class="fas fa-clock"></i>
            <h3>Bugünkü Analiz</h3>
            <div class="stat-value" id="todayAnalysis">@ViewBag.TodayAnalysis</div>
        </div>
        <div class="stat-card">
            <i class="fas fa-user-check"></i>
            <h3>Aktif Kullanıcı</h3>
            <div class="stat-value" id="activeUsers">@ViewBag.ActiveUsers</div>
        </div>
    </div>

    <div class="admin-section">
        <h2>Model Yönetimi</h2>
        <div class="model-selection">
            <div class="model-card" id="model1">
                <h3>Bitki Hastalık Modeli</h3>
                <p>Bitki yapraklarındaki hastalıkları tespit eden model</p>
                <input type="file" id="model1File" accept=".h5,.pt,.pth,.model" style="display: none;">
                <button class="btn btn-primary" onclick="document.getElementById('model1File').click()">Model Seç</button>
            </div>
            <div class="model-card" id="model2">
                <h3>Toprak Analiz Modeli</h3>
                <p>Toprak özelliklerine göre analiz yapan model</p>
                <input type="file" id="model2File" accept=".h5,.pt,.pth,.model" style="display: none;">
                <button class="btn btn-primary" onclick="document.getElementById('model2File').click()">Model Seç</button>
            </div>
        </div>
        <div class="button-group">
            <button class="save-button" id="saveModels">Modelleri Kaydet</button>
        </div>
    </div>

    <div class="admin-section">
        <h2>Kullanıcı Yönetimi</h2>
        @Html.AntiForgeryToken()
        <div class="table-container">
            <table class="admin-table" id="usersTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Ad Soyad</th>
                        <th>E-posta</th>
                        <th>Durum</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ViewBag.Users != null && ViewBag.Users.Count > 0)
                    {
                        foreach (var user in ViewBag.Users)
                        {
                            <tr data-user-id="@user.Id">
                                <td>@user.UserId</td>
                                <td>@user.FirstName @user.LastName</td>
                                <td>@user.Email</td>
                                <td>Aktif</td>
                                <td>
                                    <button class="btn btn-primary edit-btn" data-user-id="@user.Id">Düzenle</button>
                                    <button class="btn btn-danger delete-btn" data-user-id="@user.Id">Sil</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">Hiç kullanıcı bulunamadı.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="admin-section">
        <h2>Sistem Ayarları</h2>
        <form id="settingsForm">
            <div class="form-group">
                <label>Maksimum Deneme Hakkı:</label>
                <input type="number" name="maxTrials" id="maxTrials" value="3">
            </div>
            <div class="form-group">
                <label>Bakım Modu:</label>
                <div class="toggle-switch">
                    <input type="checkbox" id="maintenanceMode" name="maintenanceMode">
                    <label for="maintenanceMode"></label>
                </div>
            </div>
            <div class="form-group">
                <label>Arka Plan Resmi:</label>
                <div id="backgroundGallery" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 10px; margin-top: 10px;">
                    <!-- Resimler buraya yüklenecek -->
                </div>
                <div style="margin-top: 15px;">
                    <button type="button" id="refreshBackgrounds" class="btn btn-secondary">
                        <i class="fas fa-sync-alt"></i> Resimleri Yenile
                    </button>
                    <button type="button" id="uploadNewBackground" class="btn btn-primary">
                        <i class="fas fa-upload"></i> Yeni Resim Yükle
                    </button>
                    <input type="file" id="backgroundUpload" accept="image/*" style="display: none;">
                </div>
            </div>
            <div class="button-group">
                <button type="submit" class="save-button">Ayarları Kaydet</button>
            </div>
        </form>
    </div>

    <div class="admin-section">
        <h2>Analiz Geçmişi</h2>
        <div class="table-container">
            <table class="admin-table" id="analysisTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Kullanıcı</th>
                        <th>Analiz Tipi</th>
                        <th>Tarih</th>
                        <th>Sonuç</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="5" class="text-center">Henüz analiz geçmişi bulunmamaktadır.</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Kullanıcı Düzenleme Modalı -->
<div id="editUserModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Kullanıcı Düzenle</h3>
            <span class="close-button">&times;</span>
        </div>
        <form id="editUserForm">
            <input type="hidden" id="editUserId">
            <div class="form-group">
                <label for="editUserName">Ad Soyad</label>
                <input type="text" id="editUserName" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="editUserEmail">E-posta</label>
                <input type="email" id="editUserEmail" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="editUserStatus">Durum</label>
                <select id="editUserStatus" class="form-control" required>
                    <option value="Aktif">Aktif</option>
                    <option value="Pasif">Pasif</option>
                </select>
            </div>
            <div class="form-group">
                <label for="editUserPassword">Şifre (Değiştirmek istemiyorsanız boş bırakın)</label>
                <input type="password" id="editUserPassword" class="form-control">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="cancelEdit">İptal</button>
                <button type="submit" class="btn btn-primary">Kaydet</button>
            </div>
        </form>
    </div>
</div>

<script>
    // DOM Elements
    const modelCards = document.querySelectorAll('.model-card');
    const model1File = document.getElementById('model1File');
    const model2File = document.getElementById('model2File');
    const saveModelsBtn = document.getElementById('saveModels');
    const settingsForm = document.getElementById('settingsForm');
    const editUserModal = document.getElementById('editUserModal');
    const editUserForm = document.getElementById('editUserForm');
    const closeButton = document.querySelector('.close-button');
    const cancelEditBtn = document.getElementById('cancelEdit');

    // Model seçimi
    modelCards.forEach(card => {
        card.addEventListener('click', function() {
            modelCards.forEach(c => c.classList.remove('selected'));
            this.classList.add('selected');
        });
    });

    // Modelleri kaydetme
    saveModelsBtn.addEventListener('click', function() {
        if (model1File.files.length > 0 || model2File.files.length > 0) {
            const formData = new FormData();

            if (model1File.files.length > 0) {
                formData.append('model1', model1File.files[0]);
            }

            if (model2File.files.length > 0) {
                formData.append('model2', model2File.files[0]);
            }

            alert('Modeller başarıyla kaydedildi!');
            model1File.value = '';
            model2File.value = '';
        } else {
            alert('Lütfen en az bir model seçin!');
        }
    });

    // Modal işlevleri
    function openEditModal(userId) {
        const userRow = document.querySelector(`tr[data-user-id="${userId}"]`);
        if (!userRow) return;

        const fullName = userRow.cells[1].textContent.trim();
        const nameParts = fullName.split(' ');
        const firstName = nameParts[0];
        const lastName = nameParts.slice(1).join(' ');
        const email = userRow.cells[2].textContent.trim();

        document.getElementById('editUserId').value = userId;
        document.getElementById('editUserName').value = fullName;
        document.getElementById('editUserEmail').value = email;
        document.getElementById('editUserPassword').value = '';

        editUserModal.style.display = 'block';
    }

    function closeEditModal() {
        editUserModal.style.display = 'none';
    }

    closeButton.addEventListener('click', closeEditModal);
    cancelEditBtn.addEventListener('click', closeEditModal);

    window.addEventListener('click', function(event) {
        if (event.target === editUserModal) {
            closeEditModal();
        }
    });

    // Kullanıcı düzenleme formu
    editUserForm.addEventListener('submit', function(e) {
        e.preventDefault();

        const userId = document.getElementById('editUserId').value;
        const fullName = document.getElementById('editUserName').value;
        const nameParts = fullName.split(' ');
        const firstName = nameParts[0];
        const lastName = nameParts.slice(1).join(' ');
        const email = document.getElementById('editUserEmail').value;
        const password = document.getElementById('editUserPassword').value;

        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('/Admin/EditUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({
                id: userId,
                firstName: firstName,
                lastName: lastName,
                email: email,
                password: password
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const userRow = document.querySelector(`tr[data-user-id="${userId}"]`);
                if (userRow) {
                    userRow.cells[1].textContent = `${firstName} ${lastName}`;
                    userRow.cells[2].textContent = email;
                }
                alert('Kullanıcı bilgileri güncellendi!');
                closeEditModal();
            } else {
                alert('Hata: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Bir hata oluştu: ' + error.message);
        });
    });

    // Kullanıcı silme
    function deleteUser(userId) {
        if (confirm('Bu kullanıcıyı silmek istediğinize emin misiniz?')) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('/Admin/DeleteUser', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    id: userId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const userRow = document.querySelector(`tr[data-user-id="${userId}"]`);
                    if (userRow) {
                        userRow.remove();
                        const userCount = document.querySelectorAll('#usersTable tbody tr').length;
                        document.getElementById('totalUsers').textContent = userCount;
                        document.getElementById('activeUsers').textContent = userCount;
                    }
                    alert('Kullanıcı başarıyla silindi!');
                } else {
                    alert('Hata: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Bir hata oluştu: ' + error.message);
            });
        }
    }

    // Arka plan resim yönetimi
    async function loadBackgroundImages() {
        try {
            const response = await fetch('/Admin/GetBackgroundImages');
            const data = await response.json();

            if (data.success) {
                const gallery = document.getElementById('backgroundGallery');
                gallery.innerHTML = '';

                data.images.forEach(imagePath => {
                    const imgContainer = document.createElement('div');
                    imgContainer.className = 'background-thumbnail';
                    imgContainer.style.cursor = 'pointer';
                    imgContainer.style.border = '2px solid #ddd';
                    imgContainer.style.borderRadius = '5px';
                    imgContainer.style.overflow = 'hidden';
                    imgContainer.style.position = 'relative';

                    const img = document.createElement('img');
                    img.src = imagePath;
                    img.style.width = '100%';
                    img.style.height = '100px';
                    img.style.objectFit = 'cover';

                    const overlay = document.createElement('div');
                    overlay.className = 'background-overlay';
                    overlay.style.display = 'none';

                    const checkIcon = document.createElement('i');
                    checkIcon.className = 'fas fa-check';
                    checkIcon.style.position = 'absolute';
                    checkIcon.style.top = '50%';
                    checkIcon.style.left = '50%';
                    checkIcon.style.transform = 'translate(-50%, -50%)';
                    checkIcon.style.color = 'white';
                    checkIcon.style.fontSize = '24px';
                    checkIcon.style.display = 'none';

                    imgContainer.appendChild(img);
                    imgContainer.appendChild(overlay);
                    imgContainer.appendChild(checkIcon);

                    if (document.body.style.backgroundImage.includes(`"${imagePath}"`)) {
                        overlay.style.display = 'block';
                        checkIcon.style.display = 'block';
                        imgContainer.style.borderColor = 'var(--primary-color)';
                    }

                    imgContainer.addEventListener('click', async () => {
                        document.querySelectorAll('.background-thumbnail').forEach(el => {
                            el.querySelector('.background-overlay').style.display = 'none';
                            el.querySelector('.fa-check').style.display = 'none';
                            el.style.borderColor = '#ddd';
                        });

                        overlay.style.display = 'block';
                        checkIcon.style.display = 'block';
                        imgContainer.style.borderColor = 'var(--primary-color)';

                        const response = await fetch('/Admin/SetBackgroundImage', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(imagePath)
                        });

                        const result = await response.json();
                        if (!result.success) {
                            alert('Hata: ' + result.message);
                        }
                    });

                    gallery.appendChild(imgContainer);
                });
            } else {
                console.error('Resimler yüklenemedi:', data.message);
            }
        } catch (error) {
            console.error('Hata:', error);
        }
    }

    // Sayfa yüklendiğinde
    document.addEventListener('DOMContentLoaded', () => {
        // Edit ve Delete butonları
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                openEditModal(this.getAttribute('data-user-id'));
            });
        });

        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                deleteUser(this.getAttribute('data-user-id'));
            });
        });

        // Arka plan resimleri
        loadBackgroundImages();

        document.getElementById('refreshBackgrounds').addEventListener('click', loadBackgroundImages);

        document.getElementById('uploadNewBackground').addEventListener('click', () => {
            document.getElementById('backgroundUpload').click();
        });

        document.getElementById('backgroundUpload').addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('file', file);

                try {
                    const response = await fetch('/Admin/UploadBackgroundImage', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();
                    if (result.success) {
                        alert('Resim başarıyla yüklendi!');
                        loadBackgroundImages();
                    } else {
                        alert('Hata: ' + result.message);
                    }
                } catch (error) {
                    console.error('Hata:', error);
                    alert('Bir hata oluştu: ' + error.message);
                }

                e.target.value = '';
            }
        });
    });
</script>